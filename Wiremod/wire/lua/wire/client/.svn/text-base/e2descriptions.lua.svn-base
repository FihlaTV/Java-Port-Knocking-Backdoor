if E2Helper then
E2Helper.Descriptions["mod"] = "Modulo, returns the Remainder after Argument 1 has been divided by Argument 2. Note \"mod(-1, 3) = -1\""
E2Helper.Descriptions["sqrt"] = "Returns the Square Root of the Argument"
E2Helper.Descriptions["cbrt"] = "Returns the Cube Root of the Argument"
E2Helper.Descriptions["root"] = "Returns the Nth Root of the first Argument"
E2Helper.Descriptions["e"] = "Returns Euler's Constant"
E2Helper.Descriptions["exp"] = "Returns e to the power of the Argument (same as e()^N but shorter and faster this way)"
E2Helper.Descriptions["ln"] = " Returns the logarithm to base e of the Argument"
E2Helper.Descriptions["log2"] = "Returns the logarithm to base 2 of the Argument"
E2Helper.Descriptions["log10"] = " Returns the logarithm to base 10 of the Argument"
E2Helper.Descriptions["log"] = " Returns the logarithm to base Argument 2 of Argument 1"
E2Helper.Descriptions["abs"] = "Returns the Magnitude of the Argument"
E2Helper.Descriptions["ceil"] = "Rounds the Argument up to the nearest Integer"
E2Helper.Descriptions["ceil"] = "Rounds Argument 1 up to Argument 2's decimal precision"
E2Helper.Descriptions["floor"] = "Rounds the Argument down to the nearest Integer"
E2Helper.Descriptions["floor"] = "Rounds Argument 1 down to Argument 2's decimal precision"
E2Helper.Descriptions["round"] = "Rounds the Argument to the nearest Integer"
E2Helper.Descriptions["round"] = " Rounds Argument 1 to Argument 2's decimal precision"
E2Helper.Descriptions["int"] = "Returns the Integer part of the Argument (same as floor)"
E2Helper.Descriptions["frac"] = "Returns the Fractional part of the Argument (same as floor)"
E2Helper.Descriptions["clamp"] = "If Arg1 <= Arg2 (min) returns Arg2; If Arg1 >= Arg3 (max) returns Arg3; otherwise returns Arg1."
E2Helper.Descriptions["inrange"] = "Returns 1 if N is in the interval [N2; N3], 0 otherwise."
E2Helper.Descriptions["sign"] = "Returns the sign of argument (-1,0,1) [sign(N) = N / abs(N) ]"
E2Helper.Descriptions["min"] = "Returns the lowest value Argument"
E2Helper.Descriptions["min"] = "Returns the lowest value Argument"
E2Helper.Descriptions["min"] = "Returns the lowest value Argument"
E2Helper.Descriptions["max"] = "Returns the highest value Argument"
E2Helper.Descriptions["max"] = "Returns the highest value Argument"
E2Helper.Descriptions["max"] = "Returns the highest value Argument"
E2Helper.Descriptions["random"] = "Returns a random floating-point number between 0 and 1 [0 <= x < 1 ]"
E2Helper.Descriptions["random"] = "Returns a random floating-point number between 0 and the specified value [0 <= x < a ]"
E2Helper.Descriptions["random"] = "Returns a random floating-point number between the specified interval [a <= x < b ]"
E2Helper.Descriptions["randint"] = "Returns a random integer from 1 to the specified value [1 <= x <= a ]"
E2Helper.Descriptions["randint"] = "Returns a random integer in the specified interval [a <= x <= b ]"
E2Helper.Descriptions["pi"] = "Returns the constant PI"
E2Helper.Descriptions["toRad"] = "Converts Degree angles to Radian angles"
E2Helper.Descriptions["toDeg"] = "Converts Radian angles to Degree angles"
E2Helper.Descriptions["sin"] = "Returns the sine of N degrees"
E2Helper.Descriptions["cos"] = "Returns the cosine of N degrees"
E2Helper.Descriptions["tan"] = "Returns the tangent of N degrees"
E2Helper.Descriptions["asin"] = "Returns the inverse sine of the argument, in degrees"
E2Helper.Descriptions["acos"] = "Returns the inverse cosine of the argument, in degrees"
E2Helper.Descriptions["atan"] = "Returns the inverse tangent of the argument, in degrees"
E2Helper.Descriptions["sinh"] = "Returns the hyperbolic sine of N"
E2Helper.Descriptions["cosh"] = "Returns the hyperbolic cosine of N"
E2Helper.Descriptions["tanh"] = "Returns the hyperbolic tangent of N"
E2Helper.Descriptions["sinr"] = "Returns the sine of N radians"
E2Helper.Descriptions["cosr"] = "Returns the cosine of N radians"
E2Helper.Descriptions["tanr"] = "Returns the tangent of N radians"
E2Helper.Descriptions["asinr"] = "Returns the inverse sine of the argument, in radians"
E2Helper.Descriptions["acosr"] = "Returns the inverse cosine of the argument, in radians"
E2Helper.Descriptions["atanr"] = "Returns the inverse tangent of the argument, in radians"
E2Helper.Descriptions["index"] = "Returns Nth letter of the string, formatted as a string"
E2Helper.Descriptions["length"] = "Returns the length of the string"
E2Helper.Descriptions["upper"] = "All characters are made uppercase"
E2Helper.Descriptions["lower"] = "All characters are made lowercase"
E2Helper.Descriptions["sub"] = "Returns a substring, starting at the first number argument and ending at the second"
E2Helper.Descriptions["left"] = "Returns N amount of characters starting from the leftmost character"
E2Helper.Descriptions["right"] = "Returns N amount of characters starting from the rightmost character"
E2Helper.Descriptions["find"] = "Returns the 1st occurrence of the string S, returns 0 if not found"
E2Helper.Descriptions["find"] = "Returns the 1st occurrence of the string S starting at N and going to the end of the string, returns 0 if not found"
E2Helper.Descriptions["explode"] = "Splits the string into an array, along the boundaries formed by the string S. See also String.Explode"
E2Helper.Descriptions["repeat"] = "Repeats the input string N times"
E2Helper.Descriptions["trim"] = "Trims away spaces at the beginning and end of a string"
E2Helper.Descriptions["trimLeft"] = "Trims away opening spaces on the string"
E2Helper.Descriptions["trimRight"] = "Trims away spaces at the end of a string"
E2Helper.Descriptions["replace"] = "Finds and replaces every occurrence of the first argument with the second argument"
E2Helper.Descriptions["reverse"] = "Returns a reversed version of S"
E2Helper.Descriptions["toNumber"] = "Parses a number from a string"
E2Helper.Descriptions["toString"] = "Formats a number as a string. (Numbers may be concatenated into a string without using this function)"
E2Helper.Descriptions["toChar"] = "Returns a one-character string from its ASCII code"
E2Helper.Descriptions["toByte"] = "Returns the ASCII code of the 1st character in the string"
E2Helper.Descriptions["toByte"] = "Returns the ASCII code of the Nth character in the string"
E2Helper.Descriptions["format"] = "Formats a values exactly like Lua's string.format. Any number and type of parameter can be passed through the \"...\". Prints errors to the chat area."
E2Helper.Descriptions["match"] = "runs string.match(S, S2) and returns the sub-captures as an array."
E2Helper.Descriptions["match"] = "runs string.match(S, S2, N) and returns the sub-captures as an array."
E2Helper.Descriptions["matchFirst"] = "runs string.match(S, S2) and returns the first match or an empty string if the match failed."
E2Helper.Descriptions["matchFirst"] = "runs string.match(S, S2, N) and returns the first match or an empty string if the match failed."
E2Helper.Descriptions["entity"] = "Gets the entity associated with the id"
E2Helper.Descriptions["owner"] = "Gets the owner of the expression ( same as entity():owner() )"
E2Helper.Descriptions["id"] = "Gets the numeric id of an entity"
E2Helper.Descriptions["noentity"] = "Returns an invalid entity"
E2Helper.Descriptions["type"] = "Gets the class of an entity"
E2Helper.Descriptions["model"] = "Gets the model of an entity"
E2Helper.Descriptions["owner"] = "Gets the owner of an entity"
E2Helper.Descriptions["name"] = "Gets the name of a player"
E2Helper.Descriptions["steamID"] = "Gets the steam ID of the player"
E2Helper.Descriptions["pos"] = "Gets the position of the entity"
E2Helper.Descriptions["eye"] = "Gets a players view direction else entity forward direction"
E2Helper.Descriptions["eyeTrace"] = "Equivalent to rangerOffset(16384, E:shootPos(), E:eye()), but faster (causing less lag)"
E2Helper.Descriptions["shootPos"] = "Returns a players shoot position"
E2Helper.Descriptions["aimEntity"] = "Returns the entity that the entity is aiming at"
E2Helper.Descriptions["aimBone"] = "Returns the bone the player is currently aiming at"
E2Helper.Descriptions["aimPos"] = "Returns the point that the entity is looking at"
E2Helper.Descriptions["aimNormal"] = "Returns a normalized directional vector perpendicular to the surface pointed at"
E2Helper.Descriptions["frags"] = "Returns the number of kills the player has made"
E2Helper.Descriptions["deaths"] = "Returns the number of times the player died"
E2Helper.Descriptions["team"] = "Returns the team number a player is on"
E2Helper.Descriptions["teamName"] = "Returns the name of the team associated with the team number"
E2Helper.Descriptions["forward"] = "Gets the forward direction of the entity"
E2Helper.Descriptions["right"] = "Gets the right direction of the entity"
E2Helper.Descriptions["up"] = "Gets the up direction of the entity"
E2Helper.Descriptions["vel"] = "Gets the velocity of the entity"
E2Helper.Descriptions["velL"] = "Gets the local velocity of the entity"
E2Helper.Descriptions["boxCenter"] = "Gets the center of the entity's bounding box, as a local position vector"
E2Helper.Descriptions["boxMax"] = "Gets the maximum local XYZ of the entity's bounding box (the \"highest\" corner), as a local position vector"
E2Helper.Descriptions["boxMin"] = "Gets the minimum local XYZ of the entity's bounding box (the \"lowest\" corner), as a local position vector"
E2Helper.Descriptions["boxSize"] = "Gets the dimensions of the entity's bounding box as a vector (length, width, height)"
E2Helper.Descriptions["toWorld"] = "Transforms from a vector local to E to a world vector."
E2Helper.Descriptions["toLocal"] = "Transforms from a world vector to a vector local to E."
E2Helper.Descriptions["toWorld"] = "Transforms from an angle local to E to a world angle."
E2Helper.Descriptions["toLocal"] = "Transforms from a world angle to an angle local to E."
E2Helper.Descriptions["angVel"] = "Gets the angular velocity of the entity"
E2Helper.Descriptions["angVelVector"] = "Returns rotation axis, velocity and direction given as the vector's direction, magnitude and sense"
E2Helper.Descriptions["angles"] = "Gets the pitch, yaw and roll of the entity"
E2Helper.Descriptions["radius"] = "Gets the size of the object (not precisely, but useful)"
E2Helper.Descriptions["height"] = "Gets the height of a player or npc"
E2Helper.Descriptions["bearing"] = "Gets the bearing from the entity to the vector"
E2Helper.Descriptions["elevation"] = "Gets the elevation from the entity to the vector"
E2Helper.Descriptions["heading"] = "Gets the elevation and bearing from the entity to the vector"
E2Helper.Descriptions["health"] = "Gets the health of the entity"
E2Helper.Descriptions["armor"] = "Gets the armor of the player"
E2Helper.Descriptions["mass"] = "Gets the mass of the entity"
E2Helper.Descriptions["timeConnected"] = "Returns a players time connected to a server"
E2Helper.Descriptions["massCenter"] = "Gets the Center of Mass of the entity"
E2Helper.Descriptions["massCenterL"] = "Gets the center of mass as a local vector"
E2Helper.Descriptions["inertia"] = "Gets the principal components of the entity's inertia tensor in the form ( Ixx, Iyy, Izz )"
E2Helper.Descriptions["isPlayer"] = "Is the entity a player?"
E2Helper.Descriptions["isOnFire"] = "Is the entity on fire?"
E2Helper.Descriptions["isWeapon"] = "Is the entity a weapon?"
E2Helper.Descriptions["isNPC"] = "Is the entity a NPC?"
E2Helper.Descriptions["isFrozen"] = "Is the entity frozen?"
E2Helper.Descriptions["isVehicle"] = "Is the entity a vehicle?"
E2Helper.Descriptions["inVehicle"] = "Is the player in a vehicle?"
E2Helper.Descriptions["isWorld"] = "Is the entity the world?"
E2Helper.Descriptions["isOnGround"] = "Is the player/NPC resting on something?"
E2Helper.Descriptions["isUnderWater"] = "Is the entity under water?"
E2Helper.Descriptions["isPlayerHolding"] = "Is the entity being held by a player?"
E2Helper.Descriptions["isAlive"] = "Is the player or NPC alive?"
E2Helper.Descriptions["isCrouch"] = "Is the player crouching?"
E2Helper.Descriptions["inNoclip"] = "Is the player in noclip mode?"
E2Helper.Descriptions["keyAttack1"] = "Is the player pressing their primary fire key?"
E2Helper.Descriptions["keyAttack2"] = "Is the player pressing their secondary fire key?"
E2Helper.Descriptions["keyUse"] = "Is the player pressing their use key?"
E2Helper.Descriptions["printDriver"] = "Posts S to the chat of the driver of vehicle E. Returns 1 if the text was printed, 0 if not."
E2Helper.Descriptions["driver"] = "Returns the driver of the vehicle if there is one, nil otherwise"
E2Helper.Descriptions["passenger"] = "Returns the passenger of the vehicle if there is one, in single seat pods this will return the driver."
E2Helper.Descriptions["weapon"] = "Returns the weapon that player E is currently holding"
E2Helper.Descriptions["clip1"] = "Returns the amount of ammo in the primary clip of weapon E, -1 if there is no primary clip"
E2Helper.Descriptions["clip2"] = "Returns the amount of ammo in the secondary clip of weapon E, -1 if there is no secondary clip 1)"
E2Helper.Descriptions["primaryAmmoType"] = "Returns the type of primary ammo of weapon E as a number in a string"
E2Helper.Descriptions["secondaryAmmoType"] = "Returns the type of secondary ammo of weapon E as number in a string"
E2Helper.Descriptions["ammoCount"] = "Returns the amount of stored ammo of type S on player E, excluding current clip"
E2Helper.Descriptions["cross"] = "Gets the 2D vector cross product/wedge product"
E2Helper.Descriptions["toAngle"] = "Returns the 2D angle of the vector (given in degrees, -180 to 180)"
E2Helper.Descriptions["vec"] = "Makes a 3D vector"
E2Helper.Descriptions["vec"] = "Same as vec(0,0,0)"
E2Helper.Descriptions["vec"] = "Converts a 2D vector into a 3D vector (the z component is set to 0)"
E2Helper.Descriptions["vec"] = "Converts a 2D vector into a 3D vector (the z component is set to the second argument)"
E2Helper.Descriptions["vec"] = "Converts a 4D vector into a 3D vector (the w component is dropped)"
E2Helper.Descriptions["vec"] = "Changes an angle variable into a vector variable"
E2Helper.Descriptions["randvec"] = "Returns a uniformly distributed, random, normalized direction vector."
E2Helper.Descriptions["randvec"] = "Returns a random vector with its components between N1 and N2"
E2Helper.Descriptions["randvec"] = "Returns a random vector between V1 and V2"
E2Helper.Descriptions["cross"] = "Gets the 3D vector cross product"
E2Helper.Descriptions["shiftL"] = "Shifts the vector's components left:  shiftL( x,y,z ) = ( y,z,x )"
E2Helper.Descriptions["shiftR"] = "Shifts the vector's components right:  shiftR( x,y,z ) = ( z,x,y )"
E2Helper.Descriptions["rotate"] = "Gets the rotated vector"
E2Helper.Descriptions["rotate"] = "Gets the rotated vector"
E2Helper.Descriptions["toAngle"] = "Gets the angles of the vector"
E2Helper.Descriptions["dehomogenized"] = "Converts a 3D homogeneous vector (x,y,z,w) into a 3D cartesian vector"
E2Helper.Descriptions["isInWorld"] = "Returns 1 if the position vector is within the world, 0 if not"
E2Helper.Descriptions["ceil"] = "Rounds XYZ up to the nearest integer"
E2Helper.Descriptions["ceil"] = "Rounds XYZ up to argument 2's decimal precision"
E2Helper.Descriptions["floor"] = "Rounds XYZ down to the nearest integer"
E2Helper.Descriptions["floor"] = "Rounds XYZ down to argument 2's decimal precision"
E2Helper.Descriptions["round"] = "Rounds XYZ to the nearest integer"
E2Helper.Descriptions["round"] = "Rounds XYZ to argument 2's decimal precision"
E2Helper.Descriptions["mod"] = "Returns the remainder after XYZ have been divided by argument 2"
E2Helper.Descriptions["mod"] = "Returns the remainder after the components of vector 1 have been divided by the components of vector 2"
E2Helper.Descriptions["clamp"] = "Clamps vector 1's XYZ between the XYZ of vector 2(min) and vector 3(max)"
E2Helper.Descriptions["clamp"] = "Returns a vector in the same direction as vector 1, with length clamped between argument 2(min) and argument 3(max)"
E2Helper.Descriptions["min"] = "Returns the vector with the smallest length"
E2Helper.Descriptions["max"] = "Returns the vector with the greatest length"
E2Helper.Descriptions["minVec"] = "Returns a vector combining the lowest value components of V1 and V2"
E2Helper.Descriptions["maxVec"] = "Returns the vector combining the highest value components of V1 and V2"
E2Helper.Descriptions["mix"] = "Combines vector 1's XYZ with vector 2's XYZ by a proportion given by argument 3 (between 0 and 1)"
E2Helper.Descriptions["positive"] = "Returns a vector containing the positive value of each vector component, equivalent to abs(N)"
E2Helper.Descriptions["inrange"] = "Returns 1 if each component of V is between (or is equal to) the components of Vmin and Vmax"
E2Helper.Descriptions["length"] = "Gets the length of the vector"
E2Helper.Descriptions["length2"] = "Gets the squared length of the vector"
E2Helper.Descriptions["distance"] = "Gets the distance between vectors"
E2Helper.Descriptions["distance2"] = "Gets the squared distance between vectors"
E2Helper.Descriptions["normalized"] = "Gets the normalized vector"
E2Helper.Descriptions["dot"] = "Gets the vector dot (scalar) product"
E2Helper.Descriptions["x"] = "Gets the x component of the vector"
E2Helper.Descriptions["y"] = "Gets the y component of the vector"
E2Helper.Descriptions["z"] = "Gets the z component of the vector"
E2Helper.Descriptions["w"] = "Gets the w component of the vector"
E2Helper.Descriptions["setX"] = "Returns a copy of the vector with X replaced (use as Vec = Vec:setX(...))"
E2Helper.Descriptions["setY"] = "Returns a copy of the vector with Y replaced (use as Vec = Vec:setY(...))"
E2Helper.Descriptions["setZ"] = "Returns a copy of the vector with Z replaced (use as Vec = Vec:setZ(...))"
E2Helper.Descriptions["setW"] = "Returns a copy of the vector with W replaced (use as Vec = Vec:setW(...))"
E2Helper.Descriptions["toString"] = "Gets the vector nicely formatted as a string \"[X,Y,Z]\""
E2Helper.Descriptions["identity"] = "Creates a 3x3 identity matrix"
E2Helper.Descriptions["matrix"] = "Creates a 3x3 zero matrix"
E2Helper.Descriptions["matrix"] = "Creates a matrix with 9 values in the following order (i.j): (1,1), (1,2), (1,3), (2,1) etc."
E2Helper.Descriptions["matrix"] = "Creates a matrix with vectors by columns"
E2Helper.Descriptions["matrix"] = "Converts a 2x2 matrix into a 3x3 matrix - all (i,3) and (3,j) are filled with 0's"
E2Helper.Descriptions["matrix"] = "Converts a 4x4 matrix into a 3x3 matrix - all (i,4) and (4,j) are omitted"
E2Helper.Descriptions["swapRows"] = "Swaps the two rows specified"
E2Helper.Descriptions["swapColumns"] = "Swaps the two columns specified"
E2Helper.Descriptions["setRow"] = "Sets the values of a row. The first argument given specifies the row(j), the following arguments are the values 1j, 2j, 3j"
E2Helper.Descriptions["setRow"] = "Sets the values of a row. The first argument given specifies the row, the vector contains the values to set"
E2Helper.Descriptions["setColumn"] = "Sets the values of a column. The first argument given specifies the column, the vector contains the values to set"
E2Helper.Descriptions["setDiagonal"] = "Sets the elements of the leading diagonal"
E2Helper.Descriptions["setDiagonal"] = "Sets the elements of the leading diagonal from the components of a vector"
E2Helper.Descriptions["matrix"] = "Creates a reference frame matrix from an entity's local direction vectors by columns in the order ( x, y, z )"
E2Helper.Descriptions["matrix"] = "Returns a 3x3 reference frame matrix as described by the angle A. Multiplying by this matrix will be the same as rotating by the given angle."
E2Helper.Descriptions["x"] = "Returns the local x direction vector from a 3x3 coordinate reference frame matrix ( same as M:column(1) )"
E2Helper.Descriptions["y"] = "Returns the local y direction vector from a 3x3 coordinate reference frame matrix ( same as M:column(2) )"
E2Helper.Descriptions["z"] = "Returns the local z direction vector from a 3x3 coordinate reference frame matrix ( same as M:column(3) )"
E2Helper.Descriptions["x"] = "Returns the local x direction vector from a 4x4 coordinate reference frame matrix ( same as M:column(1) )"
E2Helper.Descriptions["y"] = "Returns the local y direction vector from a 4x4 coordinate reference frame matrix ( same as M:column(2) )"
E2Helper.Descriptions["z"] = "Returns the local z direction vector from a 4x4 coordinate reference frame matrix ( same as M:column(3) )"
E2Helper.Descriptions["pos"] = "Returns the position vector from a 4x4 coordinate reference frame matrix ( same as M:column(4) )"
E2Helper.Descriptions["row"] = "Returns the row as a vector"
E2Helper.Descriptions["column"] = "Returns the column as a vector"
E2Helper.Descriptions["element"] = "Returns the element with indices (i,j)"
E2Helper.Descriptions["setElement"] = "Sets an element's value. The first two arguments specify the indices (i,j), the third argument is the value to set it to"
E2Helper.Descriptions["swapElements"] = "Swaps two elements, specified by indices ( i1, j1, i2, j2 )"
E2Helper.Descriptions["diagonal"] = "Returns a vector comprising the elements along the leading diagonal"
E2Helper.Descriptions["trace"] = "Returns the trace of a matrix"
E2Helper.Descriptions["det"] = "Returns the determinant of a matrix (Does not work for 4x4 matrices)"
E2Helper.Descriptions["transpose"] = "Returns the transpose of a matrix"
E2Helper.Descriptions["ang"] = "Makes an angle"
E2Helper.Descriptions["ang"] = "Same as ang(0,0,0)"
E2Helper.Descriptions["ang"] = "Changes a vector variable into an angle variable"
E2Helper.Descriptions["ceil"] = "Rounds PYR up to the nearest integer"
E2Helper.Descriptions["ceil"] = "Rounds PYR up to argument 2's decimal precision"
E2Helper.Descriptions["floor"] = "Rounds PYR down to the nearest integer"
E2Helper.Descriptions["floor"] = "Rounds PYR down to argument 2's decimal precision"
E2Helper.Descriptions["round"] = "Rounds PYR to the nearest integer"
E2Helper.Descriptions["round"] = "Rounds PYR to argument 2's decimal precision"
E2Helper.Descriptions["mod"] = "Returns the remainder after PYR have been divided by argument 2"
E2Helper.Descriptions["mod"] = "Returns the remainder after the components of angle 1 have been divided by the components of angle 2"
E2Helper.Descriptions["clamp"] = "Clamps angle 1's PYR between the PYR of angle 2(min) and angle 3(max)"
E2Helper.Descriptions["clamp"] = "Clamps angle 1's PYR between argument 2(min) and argument 3(max)"
E2Helper.Descriptions["mix"] = "Combines angle 1's PYR with angle 2's PYR by a proportion given by argument 3 (between 0 and 1)"
E2Helper.Descriptions["shiftL"] = "Shifts the angle's components left:  shiftL( p,y,r ) = ( y,r,p )"
E2Helper.Descriptions["shiftR"] = "Shifts the angle's components right:  shiftR( p,y,r ) = ( r,p,y )"
E2Helper.Descriptions["angnorm"] = "Gets the normalized angle of an angle"
E2Helper.Descriptions["angnorm"] = "Gets the normalized angle of a number"
E2Helper.Descriptions["pitch"] = "Gets the pitch of the angle"
E2Helper.Descriptions["yaw"] = "Gets the yaw of the angle"
E2Helper.Descriptions["roll"] = "Gets the roll of the angle"
E2Helper.Descriptions["setPitch"] = "Returns a copy of the angle with Pitch replaced (use as Ang = Ang:setPitch(...))"
E2Helper.Descriptions["setYaw"] = "Returns a copy of the angle with Yaw replaced (use as Ang = Ang:setYaw(...))"
E2Helper.Descriptions["setRoll"] = "Returns a copy of the angle with Roll replaced (use as Ang = Ang:setRoll(...))"
E2Helper.Descriptions["toString"] = "Gets the angle nicely formatted as a string \"[P,Y,R]\""
E2Helper.Descriptions["forward"] = "Gets the forward vector of the angle."
E2Helper.Descriptions["right"] = "Gets the right vector of the angle."
E2Helper.Descriptions["up"] = "Gets the up vector of the angle."
E2Helper.Descriptions["table"] = "Creates an empty table"
E2Helper.Descriptions["clone"] = "Creates an independent copy of a table"
E2Helper.Descriptions["count"] = "Returns the number of used indexes in the table"
E2Helper.Descriptions["<type>"] = "Deprecated. Use T[S,<type>] instead."
E2Helper.Descriptions["array"] = "Creates an empty array"
E2Helper.Descriptions["clone"] = "Creates an independant copy of an array"
E2Helper.Descriptions["count"] = "Returns the number of used indexes in the array"
E2Helper.Descriptions["sum"] = "Adds all numbers in the array together and returns result"
E2Helper.Descriptions["concat"] = "Combines all strings and returns result"
E2Helper.Descriptions["concat"] = "Combines all strings with specified string in between and returns result"
E2Helper.Descriptions["average"] = "Gives the average of all numbers in array"
E2Helper.Descriptions["min"] = "Returns the smallest number in array"
E2Helper.Descriptions["minIndex"] = "Returns the index of the smallest number in array"
E2Helper.Descriptions["max"] = "Returns the largest number in array"
E2Helper.Descriptions["maxIndex"] = "Returns the index of the largest number in array"
E2Helper.Descriptions["bone"] = "Returns E's Nth bone"
E2Helper.Descriptions["bones"] = "Returns an array containing all of E's bones. This array's first element has the index 0!"
E2Helper.Descriptions["boneCount"] = "Returns E's number of bones"
E2Helper.Descriptions["nobone"] = "Returns an invalid bone"
E2Helper.Descriptions["aimBone"] = "Returns the bone the player is currently aiming at"
E2Helper.Descriptions["entity"] = "Returns the entity B belongs to"
E2Helper.Descriptions["index"] = "Returns B's index in the entity it belongs to. Returns -1 if the bone is invalid or an error occured"
E2Helper.Descriptions["pos"] = "Returns B's position"
E2Helper.Descriptions["forward"] = "Returns a vector describing B's forward direction"
E2Helper.Descriptions["right"] = "Returns a vector describing B's right direction"
E2Helper.Descriptions["up"] = "Returns a vector describing B's up direction"
E2Helper.Descriptions["vel"] = "Returns B's velocity"
E2Helper.Descriptions["velL"] = "Returns B's velocity in local coordinates"
E2Helper.Descriptions["toWorld"] = "Transforms V from local coordinates (as seen from B) to world coordinates"
E2Helper.Descriptions["toLocal"] = "Transforms V from world coordinates to local coordinates (as seen from B)"
E2Helper.Descriptions["angVel"] = "Returns B's angular velocity"
E2Helper.Descriptions["angles"] = "Returns B's pitch, yaw and roll angles"
E2Helper.Descriptions["bearing"] = "Returns the bearing (yaw) from B to V"
E2Helper.Descriptions["elevation"] = "Returns the elevation (pitch) from B to V"
E2Helper.Descriptions["mass"] = "Returns B's mass"
E2Helper.Descriptions["massCenter"] = "Returns B's Center of Mass"
E2Helper.Descriptions["massCenterL"] = "Returns B's Center of Mass in local coordinates"
E2Helper.Descriptions["inertia"] = "Gets the principal components of B's inertia tensor in the form vec(Ixx, Iyy, Izz)"
E2Helper.Descriptions["isFrozen"] = "Returns 1 if B is frozen, 0 otherwise"
E2Helper.Descriptions["isHiSpeed"] = "Returns true if the linked component is high-speed capable."
E2Helper.Descriptions["entity"] = "Returns the entity of the linked component."
E2Helper.Descriptions["hasInput"] = "Returns true if the linked component has an input of the specified name."
E2Helper.Descriptions["hasOutput"] = "Returns true if the linked component has an output of the specified name."
E2Helper.Descriptions["number"] = "Deprecated. Use XWL[S,number] instead."
E2Helper.Descriptions["vector"] = "Deprecated. Use XWL[S,vector] instead."
E2Helper.Descriptions["string"] = "Deprecated. Use XWL[S,string] instead."
E2Helper.Descriptions["xyz"] = "Retrieves the X/Y/Z as the corresponding values in the vector."
E2Helper.Descriptions["entity"] = "Deprecated. Use XWL[S,entity] instead."
E2Helper.Descriptions["writeCell"] = "Deprecated. Use XWL[N]=X instead."
E2Helper.Descriptions["readCell"] = "Deprecated. Use XWL[N] instead."
E2Helper.Descriptions["XWL[N]"] = " Returns contents of the specified memory cell."
E2Helper.Descriptions["writeString"] = "Writes a null-terminated string to the given address. Returns the next free address or 0 on failure."
E2Helper.Descriptions["readString"] = "Reads a null-terminated string from the given address. Returns an empty string on failure."
E2Helper.Descriptions["inputs"] = "Returns an array of all the inputs that XWL has without their types. Returns an empty array if it has none"
E2Helper.Descriptions["outputs"] = "Returns an array of all the outputs that XWL has without their types. Returns an empty array if it has none"
E2Helper.Descriptions["inputType"] = "Returns the type of input that S is in lowercase. ( \"NORMAL\"  is changed to \"number\" )"
E2Helper.Descriptions["outputType"] = "Returns the type of output that S is in lowercase. ( \"NORMAL\"  is changed to \"number\" )"
E2Helper.Descriptions["comp"] = "Returns complex zero"
E2Helper.Descriptions["comp"] = "Converts a real number to complex (returns complex number with real part N and imaginary part 0)"
E2Helper.Descriptions["comp"] = "Returns N+N2*i"
E2Helper.Descriptions["i"] = "Returns the imaginary unit i"
E2Helper.Descriptions["i"] = "Returns N*i"
E2Helper.Descriptions["abs"] = "Returns the absolute value of C"
E2Helper.Descriptions["arg"] = "Returns the argument of C"
E2Helper.Descriptions["conj"] = "Returns the conjugate of C"
E2Helper.Descriptions["real"] = "Returns the real part of C"
E2Helper.Descriptions["imag"] = "Returns the imaginary part of C"
E2Helper.Descriptions["exp"] = "Raises Euler's constant e to the power of C"
E2Helper.Descriptions["log"] = "Calculates the natural logarithm of C"
E2Helper.Descriptions["log"] = "Calculates the logarithm of C2 to a complex base C"
E2Helper.Descriptions["log"] = "Calculates the logarithm of C to a real base N"
E2Helper.Descriptions["log2"] = "Calculates the logarithm of C to base 2"
E2Helper.Descriptions["log10"] = "Calculates the logarithm of C to base 10"
E2Helper.Descriptions["sqrt"] = "Calculates the square root of C"
E2Helper.Descriptions["csqrt"] = "Calculates the complex square root of the real number N"
E2Helper.Descriptions["sin"] = "Calculates the sine of C"
E2Helper.Descriptions["cos"] = "Calculates the cosine of C"
E2Helper.Descriptions["sinh"] = "Calculates the hyperbolic sine of C"
E2Helper.Descriptions["cosh"] = "Calculates the hyperbolic cosine of C"
E2Helper.Descriptions["toString"] = "Formats C as a string."
E2Helper.Descriptions["quat"] = "Creates a zero quaternion"
E2Helper.Descriptions["quat"] = "Creates a quaternion with real part equal to N"
E2Helper.Descriptions["quat"] = "Creates a quaternion with real and \"i\" parts equal to C"
E2Helper.Descriptions["quat"] = "Converts a vector to a quaternion (returns V.x*i + V.y*j + V.z*k)"
E2Helper.Descriptions["quat"] = "Returns N+N2i+N3j+N4k"
E2Helper.Descriptions["quat"] = "Converts A to a quaternion"
E2Helper.Descriptions["quat"] = "Converts angle of E to a quaternion"
E2Helper.Descriptions["qi"] = "Returns quaternion i"
E2Helper.Descriptions["qi"] = "Returns quaternion N*i"
E2Helper.Descriptions["qj"] = "Returns j"
E2Helper.Descriptions["qj"] = "Returns N*j"
E2Helper.Descriptions["qk"] = "Returns k"
E2Helper.Descriptions["qk"] = "Returns N*k"
E2Helper.Descriptions["abs"] = "Returns absolute value of Q"
E2Helper.Descriptions["conj"] = "Returns the conjugate of Q"
E2Helper.Descriptions["inv"] = "Returns the inverse of Q"
E2Helper.Descriptions["real"] = "Returns the real component of the quaternion"
E2Helper.Descriptions["i"] = "Returns the i component of the quaternion"
E2Helper.Descriptions["j"] = "Returns the j component of the quaternion"
E2Helper.Descriptions["k"] = "Returns the k component of the quaternion"
E2Helper.Descriptions["xaxis"] = "Rotates X axis using Q"
E2Helper.Descriptions["yaxis"] = "Rotates Y axis using Q"
E2Helper.Descriptions["zaxis"] = "Rotates Z axis using Q"
E2Helper.Descriptions["qRotation"] = "Returns quaternion for rotation about axis V by angle N"
E2Helper.Descriptions["vec"] = "Converts Q to a vector by dropping the real component"
E2Helper.Descriptions["matrix"] = "Converts Q to a transformation matrix"
E2Helper.Descriptions["rotationAngle"] = "Returns the angle of rotation in degrees (by coder0xff)"
E2Helper.Descriptions["rotationAxis"] = "Returns the axis of rotation (by coder0xff)"
E2Helper.Descriptions["rotationVector"] = "Returns the rotation vector - rotation axis where magnitude is the angle of rotation in degress (by coder0xff)"
E2Helper.Descriptions["toString"] = "Formats Q as a string."
E2Helper.Descriptions["first"] = "Returns 1 if the expression was spawned or reset"
E2Helper.Descriptions["duped"] = "Returns 1 if the expression was duplicated"
E2Helper.Descriptions["inputClk"] = "Returns 1 if the expression was triggered by an input"
E2Helper.Descriptions["ops"] = "Returns how many ops are used every execution on average"
E2Helper.Descriptions["opcounter"] = "Returns how many ops have been used so far in this execution plus the amount of hard quota used"
E2Helper.Descriptions["minquota"] = "The ops left before soft quota is used up"
E2Helper.Descriptions["maxquota"] = "The ops left before hard quota is exceeded and the expression shuts down"
E2Helper.Descriptions["entity"] = "Gets the entity of the expression"
E2Helper.Descriptions["concmd"] = "Takes a string and executes it in console. Returns 1 if it succeeded and 0 if it failed.The client must enable this in the console with \"wire_expression2_concmd 1\"."
E2Helper.Descriptions["tickClk"] = "Returns 1 if the current execution was caused by \"runOnTick\""
E2Helper.Descriptions["curtime"] = "Returns the current time since server-start in seconds"
E2Helper.Descriptions["clk"] = "Returns 1 if the current execution was caused by the interval"
E2Helper.Descriptions["clk"] = "Returns 1 if the current execution was caused by the inserted name"
E2Helper.Descriptions["toUnit"] = "Converts default garrysmod units to specified units"
E2Helper.Descriptions["fromUnit"] = "Converts specified units to default garrysmod units"
E2Helper.Descriptions["convertUnit"] = "Converts between two units"
E2Helper.Descriptions["map"] = "Returns the current map name"
E2Helper.Descriptions["hostname"] = "Returns the Name of the server"
E2Helper.Descriptions["isLan"] = "Returns 1 if lan mode is enabled"
E2Helper.Descriptions["gamemode"] = "Returns the name of the current gamemode"
E2Helper.Descriptions["gravity"] = "Returns gravity"
E2Helper.Descriptions["ping"] = "Returns the latency (Player:ping() for individual player)"
E2Helper.Descriptions["isSinglePlayer"] = "Returns 1 if singleplayer, 0 if multiplayer"
E2Helper.Descriptions["isDedicated"] = "Returns 1 if server is dedicated, 0 if listen"
E2Helper.Descriptions["numPlayers"] = "Returns the number of players currently in the server"
E2Helper.Descriptions["maxPlayers"] = "Returns the max number of players allowed in the server"
E2Helper.Descriptions["playerDamage"] = "Returns 1 if player vs player damage is enabled on the server"
E2Helper.Descriptions["convar"] = "Give a console command such as \"name\" and it returns the set value"
E2Helper.Descriptions["convarnum"] = "Give a console command such as \"sbox_godmode\" and it returns the set value"
E2Helper.Descriptions["time"] = "Returns numerical time/date info from the server. Possible arguments: \"year\", \"month\", \"day\", \"hour\", \"min\", \"sec\", \"wday\" (weekday, Sunday is 1), \"yday\" (day of the year), and \"isdst\" (daylight saving flag 0/1)"
E2Helper.Descriptions["getConstraints"] = "Returns an array with all entities directly or indirectly constrained to E, except E itself."
E2Helper.Descriptions["hasConstraints"] = "Returns the number of the constraints E has"
E2Helper.Descriptions["hasConstraints"] = "Returns the number of the constraints E has with the given constraint type (see the types list below)"
E2Helper.Descriptions["isConstrained"] = "Returns 1 if E has constraints, 0 if not"
E2Helper.Descriptions["isWeldedTo"] = "Returns the first entity E was welded to"
E2Helper.Descriptions["isWeldedTo"] = "Returns the Nth entity E was welded to"
E2Helper.Descriptions["isConstrainedTo"] = "Returns the first entity E was constrained to"
E2Helper.Descriptions["isConstrainedTo"] = "Returns the Nth entity E was constrained to"
E2Helper.Descriptions["isConstrainedTo"] = "Returns the first entity E was constrained to with the given constraint type (see the types list below)"
E2Helper.Descriptions["isConstrainedTo"] = "Returns the Nth entity E was constrained to with the given constraint type (see the types list below)"
E2Helper.Descriptions["parent"] = "Returns the entity E is parented to."
E2Helper.Descriptions["parentBone"] = "Returns the bone E is parented to."
E2Helper.Descriptions["chatClk"] = "Returns 1 if the chip is being executed because of a chat event. Returns 0 otherwise."
E2Helper.Descriptions["chatClk"] = "Returns 1 if the chip is being executed because of a chat event by player E. Returns 0 otherwise."
E2Helper.Descriptions["lastSpoke"] = "Returns the last player to speak."
E2Helper.Descriptions["lastSaid"] = "Returns the last message in the chat log."
E2Helper.Descriptions["lastSaidWhen"] = "Returns the time the last message was sent."
E2Helper.Descriptions["lastSaidTeam"] = "Returns 1 if the last message was sent in the team chat, 0 otherwise."
E2Helper.Descriptions["lastSaid"] = "Returns what the player E last said."
E2Helper.Descriptions["lastSaidWhen"] = "Returns when the given player last said something."
E2Helper.Descriptions["lastSaidTeam"] = "Returns 1 if the last message was sent in the team chat, 0 otherwise."
E2Helper.Descriptions["getColor"] = "Returns the color of an entity as a vector (R,G,B)"
E2Helper.Descriptions["getAlpha"] = "Returns the alpha of an entity"
E2Helper.Descriptions["getMaterial"] = "Returns the material of an entity"
E2Helper.Descriptions["getSkin"] = "Gets E's current skin number."
E2Helper.Descriptions["getSkinCount"] = "Gets E's number of skins."
E2Helper.Descriptions["hsv2rgb"] = "Converts V from the HSV color space to the RGB color space"
E2Helper.Descriptions["rgb2hsv"] = "Converts V from the RGB color space to the HSV color space"
E2Helper.Descriptions["rgb2digi"] = "Converts an RGB vector V to a number in digital screen format. N Specifies a mode, either 0, 2 or 3, corresponding to Digital Screen color modes."
E2Helper.Descriptions["rgb2digi"] = "Converts the RGB color (N,N2,N3) to a number in digital screen format. N4 Specifies a mode, either 0, 2 or 3, corresponding to Digital Screen color modes."
E2Helper.Descriptions["findUpdateRate"] = "Returns the minimum delay between entity find events on a chip"
E2Helper.Descriptions["findPlayerUpdateRate"] = "Returns the minimum delay between entity find events per player"
E2Helper.Descriptions["findCanQuery"] = "Returns 1 if find functions can be used, 0 otherwise."
E2Helper.Descriptions["findInSphere"] = "Finds entities in a sphere around V with a radius of N, returns the number found after filtering"
E2Helper.Descriptions["findInCone"] = "Like findInSphere but with a [Spherical cone], arguments are for position, direction, length, and degrees (works now)"
E2Helper.Descriptions["findInBox"] = "Like findInSphere but with a globally aligned box, the arguments are the diagonal corners of the box"
E2Helper.Descriptions["findByName"] = "Find all entities with the given name"
E2Helper.Descriptions["findByModel"] = "Find all entities with the given model"
E2Helper.Descriptions["findByClass"] = "Find all entities with the given class"
E2Helper.Descriptions["findPlayerByName"] = "Returns the player with the given name, this is an exception to the rule"
E2Helper.Descriptions["findResult"] = "Returns the indexed entity from the previous find event (valid parameters are 1 to the number of entities found)"
E2Helper.Descriptions["findClosest"] = "Returns the closest entity to the given point from the previous find event"
E2Helper.Descriptions["findToArray"] = "Formats the query as an array, R:entity(Index) to get a entity, R:string to get a description including the name and entity id."
E2Helper.Descriptions["find"] = "Equivalent to findResult(1)"
E2Helper.Descriptions["findSortByDistance"] = "Sorts the entities from the last find event, index 1 is the closest to point V, returns the number of entities in the list"
E2Helper.Descriptions["findClipToClass"] = "Filters the list of entities by removing all entities that are NOT of this class"
E2Helper.Descriptions["findClipFromClass"] = "Filters the list of entities by removing all entities that are of this class"
E2Helper.Descriptions["findClipToModel"] = "Filters the list of entities by removing all entities that do NOT have this model"
E2Helper.Descriptions["findClipFromModel"] = "Filters the list of entities by removing all entities that do have this model"
E2Helper.Descriptions["findClipToName"] = "Filters the list of entities by removing all entities that do NOT have this name"
E2Helper.Descriptions["findClipFromName"] = "Filters the list of entities by removing all entities that do have this name"
E2Helper.Descriptions["findClipToSphere"] = "Filters the list of entities by removing all entities NOT within the specified sphere (center, radius)"
E2Helper.Descriptions["findClipFromSphere"] = "Filters the list of entities by removing all entities within the specified sphere (center, radius)"
E2Helper.Descriptions["gGetGroup"] = "Returns the name of the current group for the chip"
E2Helper.Descriptions["ranger"] = "You input max range, it returns ranger data"
E2Helper.Descriptions["ranger"] = "Same as above with added inputs for X and Y skew"
E2Helper.Descriptions["rangerAngle"] = "You input the distance, x-angle and y-angle (both in degrees) it returns ranger data"
E2Helper.Descriptions["rangerOffset"] = "You input two vector points, it returns ranger data"
E2Helper.Descriptions["rangerOffset"] = "You input the range, a position vector, and a direction vector and it returns ranger data"
E2Helper.Descriptions["distance"] = "Outputs the distance from the rangerdata input, else depends on rangerDefault"
E2Helper.Descriptions["position"] = "Outputs the position of the input ranger data trace IF it hit anything, else returns (0,0,0)"
E2Helper.Descriptions["entity"] = "Returns the entity of the input ranger data trace IF it hit an entity, else returns nil"
E2Helper.Descriptions["hit"] = "Returns 1 if the input ranger data hit anything and 0 if it didn't"
E2Helper.Descriptions["hitNormal"] = "Outputs a normalized vector perpendicular to the surface the ranger is pointed at."
E2Helper.Descriptions["npcDisp"] = " Returns the NPC's relationship to entity E."
E2Helper.Descriptions["signalGetGroup"] = "Gets the E-2's current signal group"
E2Helper.Descriptions["signalClk"] = "Returns 1 if the chip was executed because of any signal, regardless of name, group or scope. Returns 0 otherwise."
E2Helper.Descriptions["signalClk"] = "Returns 1 if the chip was executed because the signal S was sent, regardless of group or scope. Returns 0 otherwise."
E2Helper.Descriptions["signalClk"] = "Returns 1 if the chip was executed because the signal S was sent to the scope N, regardless of group. Returns 0 otherwise."
E2Helper.Descriptions["signalClk"] = "Returns 1 if the chip was executed because the signal S2 was sent in the group S, regardless of scope. Returns 0 otherwise."
E2Helper.Descriptions["signalClk"] = "Returns 1 if the chip was executed because the signal S2 was sent in the group S to the scope N. Returns 0 otherwise."
E2Helper.Descriptions["signalName"] = "Returns the name of the received signal."
E2Helper.Descriptions["signalGroup"] = "Returns the group name of the received signal."
E2Helper.Descriptions["signalSender"] = "Returns the entity of the chip that sent the signal."
E2Helper.Descriptions["signalSenderId"] = "Returns the entity ID of the chip that sent the signal. Useful if the entity doesn't exist anymore."
E2Helper.Descriptions["glonEncode"] = "Encodes R into a string, using GLON."
E2Helper.Descriptions["glonEncode"] = "Encodes T into a string, using GLON."
E2Helper.Descriptions["glonDecode"] = "Decodes S into an array, using GLON."
E2Helper.Descriptions["glonDecodeTable"] = "Decodes S into a table, using GLON."
E2Helper.Descriptions["holoEntity"] = "Returns the entity corresponding to the hologram given by the specified index."
E2Helper.Descriptions["fileLoaded"] = "Returns whether or not the file has been loaded onto the server."
E2Helper.Descriptions["fileRead"] = "Returns the string data from a given file (has to be loaded onto server)."
E2Helper.Descriptions["fileClk"] = "Returns whether the execution was run because a file finished uploading and was that file of a specific file name."
E2Helper.Descriptions["fileClk"] = "Returns whether the execution was run because a file finished uploading."
end
