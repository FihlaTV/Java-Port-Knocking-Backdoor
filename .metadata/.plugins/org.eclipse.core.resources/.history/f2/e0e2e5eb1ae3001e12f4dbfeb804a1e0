package hooverville.commands.filemon;

import java.io.File;

public abstract class FileListener implements Runnable {

	private File f;
	private long lastModified;
	private String rootDirectory;
	private String packageName;
	
	public FileListener(File f) {		
		this.f = f;
		lastModified = f.lastModified();
	}

	//root directory, package name, file name
	public FileListener(File f, String packageName, String fileName) {
		String filePath = f.getCanonicalPath() + File.separator + packageName + File.separator + fileName;
		f = new File(filePath);
		//this.f = f;
		lastModified = f.lastModified();
	}
	

	public void run() {
		//if(f.exists())
		try {
			for (;;) {
				long newLastModified = f.lastModified();
				if (newLastModified != lastModified) {
					lastModified = newLastModified;
					fileChanged();					
				}
				Thread.sleep(1000);
			}

		} catch (InterruptedException e) {			
			e.printStackTrace();
		}
	}
	
	public abstract void fileChanged();
	
	public File getFile(){
		return f;
	}

}
