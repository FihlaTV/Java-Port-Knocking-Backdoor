package plugins.util;

import java.util.Enumeration;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import plugins.api.Command;

public class CommandController {

	/*
	 * Loading all the commands will be slow, but getting a command will be
	 * fast.
	 */

	private ConcurrentHashMap<String, Command> pluginMap;
	private CopyOnWriteArrayList<String> commandList;
	private CommandHandler commandHandler;
	private CommandLoader commandLoader;
	private AtomicBoolean outOfSync;

	//create the regex here
	private Pattern pattern;
	private Matcher matcher; //TODO: move this to the commandhandler

	

	public CommandController() {
		commandList = new CopyOnWriteArrayList<String>();
		commandLoader = new CommandLoader(this);
		//pattern = Pattern.compile(""); //not sure If I can do this
	}

	//	/**
	//	 * @param index
	//	 *            the int command to be referenced
	//	 * @param c
	//	 *            the Command object
	//	 * @return the previous Command associated with index, or null if the index
	//	 *         was out of range
	//	 */
	//	private Command putCommand(int index, Command c) {
	//		try {
	//			return commandList.set(index, c);
	//		} catch (IndexOutOfBoundsException e) {
	//			return null;
	//		}
	//	}

	//	/**
	//	 * @param index
	//	 *            the int command to be referenced
	//	 * @return the Command at the specified position in the list, or null if the
	//	 *         index was out of range
	//	 */
	//	private Command getCommand(int index) {
	//		try {
	//			return commandList.get(index);
	//		} catch (IndexOutOfBoundsException e) {
	//			return null;
	//		}
	//	}
	
	/*
	 * TODO: Check pattern (use reset to set the matScher)
	 */
	public void checkPattern(String input){
		//I guess we need to read the api for this
		//pass in the input, see if there is a match by getting back the group number -each group number is the index to the Command
		//if there is then return the group numbers?
		//based on the number of commands loaded we should know the number of group numbers. we could check each one?
		
		Matcher m = pattern.matcher(input);
		m.
	}
	
	/*
	 * TODO: call the plugin for each group that existed
	 */
	public void callPlugin(){
		
	}
	

	/**
	 * @return the regex in the form of a String. This also updates the
	 *         commandList.
	 */
	private void buildRegex() {		
		commandList.clear();
		if(pluginMap.size() <= 0){
			return;
		}

		Enumeration<String> keys = pluginMap.keys();		
		StringBuilder regex = new StringBuilder();
		
		regex.append("(");
		String k = keys.nextElement();
		regex.append(k);
		regex.append(")");
		commandList.add(k);
		
		while (keys.hasMoreElements()) {			
			regex.append("|");
			regex.append("(");
			String key = keys.nextElement();
			regex.append(key);
			regex.append(")");
			commandList.add(key);
		}

		 pattern = Pattern.compile(regex.toString());
	}

	/**
	 * @param s
	 *            the String regex to be referenced
	 * @param c
	 *            the Command object
	 * @return the previous value associated with key, or null if there was no
	 *         mapping for key
	 */
	public Command putCommand(String s, Command c) {
		if (s == null) return null;
		if (s == "") return null;
		Command cm = pluginMap.put(s, c);
		outOfSync.set(true);
		return cm;
	}

	/**
	 * @param s
	 *            the String regex to be referenced
	 * @return the value to which the specified key is mapped, or null if this
	 *         map contains no mapping for the key
	 */
	public Command getCommand(String regex) {
		return pluginMap.get(regex);
	}

	/**
	 * @return the commandHandler
	 */
	public CommandHandler getCommandHandler() {
		return commandHandler;
	}

	/**
	 * @param commandHandler
	 *            the commandHandler to set
	 */
	public void setCommandHandler(CommandHandler commandHandler) {
		this.commandHandler = commandHandler;
	}

	/**
	 * @return the commandLoader
	 */
	public CommandLoader getCommandLoader() {
		return commandLoader;
	}

	/**
	 * @param commandLoader
	 *            the commandLoader to set
	 */
	public void setCommandLoader(CommandLoader commandLoader) {
		this.commandLoader = commandLoader;
	}

	/**
	 * @return the commandList
	 */
	public CopyOnWriteArrayList<String> getCommandList() {
		if (outOfSync.get()) {
			this.buildRegex();
			outOfSync.set(false);
		}
		return commandList;
	}

	/**
	 * @param commandList
	 *            the commandList to set
	 */
	private void setCommandList(CopyOnWriteArrayList<String> commandList) {
		this.commandList = commandList;
	}

	/**
	 * @return the pluginMap
	 */
	public ConcurrentHashMap<String, Command> getPluginMap() {
		return pluginMap;
	}

	/**
	 * @param pluginMap
	 *            the pluginMap to set
	 */
	private void setPluginMap(ConcurrentHashMap<String, Command> pluginMap) {
		this.pluginMap = pluginMap;
	}
}
